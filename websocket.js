const { setupChatHandlers, setUsersMap } = require('./websocket-chat');
const { setupTranscriberHandlers } = require('./websocket-transcriber');

const users = new Map(); // socketId => userId
setUsersMap(users);
const watchers = new Map(); // userId => Set(socketIds)

const initializeWebSocket = (io) => {
  io.on('connection', async (socket) => {
    const userId = socket.handshake.query.userId
    users.set(socket.id, userId)
    // eslint-disable-next-line no-console
    console.log(`üü¢ User connected: ${userId} (${socket.id})`)

    // üîî –Ø–∫—â–æ —Ö—Ç–æ—Å—å –≤–∂–µ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î –∑–∞ —Ü–∏–º userId ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ó—Ö
    if (watchers.has(userId)) {
      watchers.get(userId).forEach((socketId) => {
        io.to(socketId).emit('user-online', userId)
      })
    }

    // üîπ –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å
    socket.on('watch-user', ({ targetUserId }) => {
      if (!targetUserId) return
      if (!watchers.has(targetUserId)) {
        watchers.set(targetUserId, new Set())
      }
      watchers.get(targetUserId).add(socket.id)
      // eslint-disable-next-line no-console
      console.log(`üëÅÔ∏è ${userId} is watching ${targetUserId}`)

      // –Ø–∫—â–æ targetUserId –≤–∂–µ –æ–Ω–ª–∞–π–Ω ‚Äî –æ–¥—Ä–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ
      if ([...users.values()].includes(targetUserId)) {
        socket.emit('user-online', targetUserId)
      }
    })

    // ------üîπ –ü–Ü–î–ö–Æ–ß–ï–ù–ù–Ø –ß–ê–¢–£  ------
    setupChatHandlers(socket, io);
    // ------üîπ –õ–û–ì–Ü–ö–ê –¢–†–ê–ù–°–ö–†–ò–ü–¶–Ü–á  ------
    setupTranscriberHandlers(socket);

    // üîπ –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–∏—Å–∫–∏
    socket.on('unwatch-user', ({ targetUserId }) => {
      if (!targetUserId || !watchers.has(targetUserId)) return
      watchers.get(targetUserId).delete(socket.id)
      if (watchers.get(targetUserId).size === 0) {
        watchers.delete(targetUserId)
      }
      // eslint-disable-next-line no-console
      console.log(`üö´ ${userId} stopped watching ${targetUserId}`)
    })

    // üîπ –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    socket.on('disconnect', () => {
      const userId = users.get(socket.id)
      users.delete(socket.id)
      // eslint-disable-next-line no-console
      console.log(`üî¥ User disconnected: ${socket.id} (userId: ${userId})`)

      // üîî –°–ø–æ–≤—ñ—â–∞—î–º–æ –≤—Å—ñ—Ö, —Ö—Ç–æ —Å–ª—ñ–¥–∫—É—î –∑–∞ —Ü–∏–º userId
      if (userId && watchers.has(userId)) {
        watchers.get(userId).forEach((socketId) => {
          io.to(socketId).emit('user-offline', userId)
        })
      }

      // ‚ùóÔ∏è –î–æ–¥–∞—Ç–∫–æ–≤–æ ‚Äî –æ—á–∏—â–∞—î–º–æ —Ü–µ–π —Å–æ–∫–µ—Ç –∑ —É—Å—ñ—Ö watcher'—ñ–≤
      for (const [watchedId, socketSet] of watchers.entries()) {
        socketSet.delete(socket.id)
        if (socketSet.size === 0) {
          watchers.delete(watchedId)
        }
      }
    })
  })

  return io;
}

module.exports = initializeWebSocket;
